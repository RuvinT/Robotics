
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000150  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d3  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000126  00000000  00000000  000003d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018b  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000006af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	DDRD |= 0xFF;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	81 bb       	out	0x11, r24	; 17
	TCCR1A |= 1<<WGM11 | 1<<COM1A1 | 1<<COM1A0;
  72:	8f b5       	in	r24, 0x2f	; 47
  74:	82 6c       	ori	r24, 0xC2	; 194
  76:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1<<WGM13 | 1<<WGM12 | 1<<CS10;
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	89 61       	ori	r24, 0x19	; 25
  7c:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 19999;
  7e:	8f e1       	ldi	r24, 0x1F	; 31
  80:	9e e4       	ldi	r25, 0x4E	; 78
  82:	97 bd       	out	0x27, r25	; 39
  84:	86 bd       	out	0x26, r24	; 38

	OCR1A = ICR1 - 500; //18000
  86:	86 b5       	in	r24, 0x26	; 38
  88:	97 b5       	in	r25, 0x27	; 39
  8a:	84 5f       	subi	r24, 0xF4	; 244
  8c:	91 40       	sbci	r25, 0x01	; 1
  8e:	9b bd       	out	0x2b, r25	; 43
  90:	8a bd       	out	0x2a, r24	; 42

	while(1){
	
		OCR1A = ICR1 - 2200;
  92:	86 b5       	in	r24, 0x26	; 38
  94:	97 b5       	in	r25, 0x27	; 39
  96:	88 59       	subi	r24, 0x98	; 152
  98:	98 40       	sbci	r25, 0x08	; 8
  9a:	9b bd       	out	0x2b, r25	; 43
  9c:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	84 e3       	ldi	r24, 0x34	; 52
  a2:	9c e0       	ldi	r25, 0x0C	; 12
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
		_delay_ms(4000);
		OCR1A = ICR1 - 500;
  b0:	86 b5       	in	r24, 0x26	; 38
  b2:	97 b5       	in	r25, 0x27	; 39
  b4:	84 5f       	subi	r24, 0xF4	; 244
  b6:	91 40       	sbci	r25, 0x01	; 1
  b8:	9b bd       	out	0x2b, r25	; 43
  ba:	8a bd       	out	0x2a, r24	; 42
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	84 e3       	ldi	r24, 0x34	; 52
  c0:	9c e0       	ldi	r25, 0x0C	; 12
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x56>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x60>
  cc:	00 00       	nop
  ce:	e1 cf       	rjmp	.-62     	; 0x92 <main+0x26>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
